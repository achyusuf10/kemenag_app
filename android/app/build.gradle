def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions { 
        checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "kemenag.id"
        // applicationId "id.qoin.dev"
        minSdkVersion 21
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            aaptOptions {
                ignoreAssetsPattern "mlkit_pose"
            }
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def productFlavorsName = productFlavors.name.toString()
                    def oldApkFlavorsName = productFlavorsName.replace("[", "").trim()
                    def newApkFlavorsName = oldApkFlavorsName.replace("]", "").trim()
                    // println("newApkFlavorsName=" + newApkFlavorsName)
                    def project = "INISA App-"
                    def SEP = "_"
                    def buildType = variant.buildType.name
                    def version = variant.versionName
                    def date = new Date()
                    def formattedDateWOHour = date.format('dd-MM-yy_HH-mm')
                    def formattedDateWHour = date.format('dd-MM-yy')
                    
                    // def newApkName = project + version + SEP + buildType + SEP + formattedDateWHour + ".apk"
                    def newApkName = project + version + SEP + newApkFlavorsName + SEP + formattedDateWHour + ".apk"
                    outputFileName = new File(newApkName)
                }
            }
        }
    }

    flavorDimensions "flavors"
    productFlavors {
        dev {
            dimension "flavors"
            applicationIdSuffix ".dev"
            versionNameSuffix "-alpha"
        }
        qa {
            dimension "flavors"
            applicationIdSuffix ".qa"
            versionNameSuffix "-beta"
        }
        prod {
            dimension "flavors"
        }
    }

    packagingOptions {
        exclude 'lib/**/libtranslate_jni.so'
        exclude 'lib/**/libdigitalink.so'
        exclude 'lib/**/libxeno_native.so'
        exclude 'lib/**/libmlkitcommonpipeline.so'
        // exclude 'lib/**/libbarhopper_v2.so'
        exclude 'lib/**/libclassifier_jni.so'
        // exclude 'lib/**/libface_detector_v2_jni.so'
        exclude 'lib/**/libtensorflowlite_jni.so'
        exclude 'lib/**/liblanguage_id_jni.so'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.android.support:multidex:1.0.3'
    // implementation 'com.google.firebase:firebase-messaging:22.0.0'
    // implementation platform('com.google.firebase:firebase-bom:28.3.0')
}
